// PostgreSQL Prisma schema (RECOMMENDED)
// Supports native arrays and enums

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(cuid())
  email         String   @unique
  username      String   @unique
  password      String
  walletAddress String?  @unique
  isVerified    Boolean  @default(false)
  kycStatus     KycStatus @default(PENDING)
  bio           String?
  avatar        String?
  skills        String[] @default([])
  totalEarnings Float    @default(0)
  totalSpent    Float    @default(0)
  rewardPoints  Int      @default(0)
  tier          String   @default("Bronze")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  createdTasks     Task[] @relation("TaskCreator")
  applications     TaskApplication[]
  userRewards      UserReward[]
  userAchievements UserAchievement[]
  kycDocuments     KycDocument[]
  transactions     Transaction[]

  @@map("users")
}

model Task {
  id            String     @id @default(cuid())
  title         String
  description   String
  category      String
  budget        Float
  deadline      DateTime
  skills        String[]   @default([])
  status        TaskStatus @default(OPEN)
  workerId      String?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

  // Relations
  creator       User             @relation("TaskCreator", fields: [creatorId], references: [id])
  creatorId     String
  applications  TaskApplication[]
  attachments   TaskAttachment[]

  @@map("tasks")
}

model TaskApplication {
  id            String    @id @default(cuid())
  taskId        String
  applicantId   String
  proposal      String
  bidAmount     Float
  estimatedTime String
  status        ApplicationStatus @default(PENDING)
  appliedAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  task          Task      @relation(fields: [taskId], references: [id], onDelete: Cascade)
  applicant     User      @relation(fields: [applicantId], references: [id])

  @@unique([taskId, applicantId])
  @@map("task_applications")
}

model TaskAttachment {
  id        String   @id @default(cuid())
  taskId    String
  filename  String
  filepath  String
  mimetype  String
  size      Int
  uploadedAt DateTime @default(now())

  // Relations
  task      Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@map("task_attachments")
}

model Reward {
  id          String       @id @default(cuid())
  title       String
  description String
  type        RewardType
  cost        Int          // Points required
  value       Float?       // Monetary value if applicable
  isActive    Boolean      @default(true)
  stock       Int?         // Available quantity
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  // Relations
  userRewards UserReward[]

  @@map("rewards")
}

model Transaction {
  id          String          @id @default(cuid())
  userId      String
  type        TransactionType
  amount      Float
  currency    String          @default("VRC")
  status      TransactionStatus @default(PENDING)
  fromAddress String?
  toAddress   String?
  txHash      String?
  description String?
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  // Relations
  user        User            @relation(fields: [userId], references: [id])

  @@map("transactions")
}

model UserReward {
  id         String       @id @default(cuid())
  userId     String
  rewardId   String
  status     RewardStatus @default(PENDING)
  claimedAt  DateTime     @default(now())
  redeemedAt DateTime?

  // Relations
  user       User         @relation(fields: [userId], references: [id])
  reward     Reward       @relation(fields: [rewardId], references: [id])

  @@map("user_rewards")
}

model Achievement {
  id          String   @id @default(cuid())
  title       String
  description String
  icon        String
  points      Int      // Points awarded
  condition   String   // JSON condition for unlocking
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())

  // Relations
  userAchievements UserAchievement[]

  @@map("achievements")
}

model UserAchievement {
  id            String    @id @default(cuid())
  userId        String
  achievementId String
  unlockedAt    DateTime  @default(now())

  // Relations
  user          User      @relation(fields: [userId], references: [id])
  achievement   Achievement @relation(fields: [achievementId], references: [id])

  @@unique([userId, achievementId])
  @@map("user_achievements")
}

model KycDocument {
  id             String    @id @default(cuid())
  userId         String
  documentType   String    // passport, license, etc.
  documentNumber String
  documentImage  String    // File path
  status         KycStatus @default(PENDING)
  rejectionReason String?
  submittedAt    DateTime  @default(now())
  reviewedAt     DateTime?

  // Relations
  user           User      @relation(fields: [userId], references: [id])

  @@map("kyc_documents")
}

// Enums (PostgreSQL native support)
enum KycStatus {
  PENDING
  APPROVED
  REJECTED
}

enum ApplicationStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum TaskStatus {
  OPEN
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum RewardType {
  DISCOUNT
  CASHBACK
  PHYSICAL_ITEM
  DIGITAL_ITEM
  EXPERIENCE
}

enum RewardStatus {
  PENDING
  CLAIMED
  REDEEMED
  EXPIRED
}

enum TransactionType {
  DEPOSIT
  WITHDRAWAL
  PAYMENT
  REWARD
  REFUND
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
}
